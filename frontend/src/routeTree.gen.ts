/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated/route'
import { Route as IndexImport } from './routes/index'
import { Route as AuthenticatedApplicationsUrlImport } from './routes/_authenticated/applications/url'
import { Route as AuthenticatedApplicationsApplicationIdImport } from './routes/_authenticated/applications/$applicationId'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRouteRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedApplicationsUrlRoute =
  AuthenticatedApplicationsUrlImport.update({
    id: '/applications/url',
    path: '/applications/url',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)

const AuthenticatedApplicationsApplicationIdRoute =
  AuthenticatedApplicationsApplicationIdImport.update({
    id: '/applications/$applicationId',
    path: '/applications/$applicationId',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/applications/$applicationId': {
      id: '/_authenticated/applications/$applicationId'
      path: '/applications/$applicationId'
      fullPath: '/applications/$applicationId'
      preLoaderRoute: typeof AuthenticatedApplicationsApplicationIdImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/applications/url': {
      id: '/_authenticated/applications/url'
      path: '/applications/url'
      fullPath: '/applications/url'
      preLoaderRoute: typeof AuthenticatedApplicationsUrlImport
      parentRoute: typeof AuthenticatedRouteImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteRouteChildren {
  AuthenticatedApplicationsApplicationIdRoute: typeof AuthenticatedApplicationsApplicationIdRoute
  AuthenticatedApplicationsUrlRoute: typeof AuthenticatedApplicationsUrlRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedApplicationsApplicationIdRoute:
    AuthenticatedApplicationsApplicationIdRoute,
  AuthenticatedApplicationsUrlRoute: AuthenticatedApplicationsUrlRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/applications/$applicationId': typeof AuthenticatedApplicationsApplicationIdRoute
  '/applications/url': typeof AuthenticatedApplicationsUrlRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/applications/$applicationId': typeof AuthenticatedApplicationsApplicationIdRoute
  '/applications/url': typeof AuthenticatedApplicationsUrlRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/_authenticated/applications/$applicationId': typeof AuthenticatedApplicationsApplicationIdRoute
  '/_authenticated/applications/url': typeof AuthenticatedApplicationsUrlRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/applications/$applicationId'
    | '/applications/url'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/login' | '/applications/$applicationId' | '/applications/url'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/login'
    | '/_authenticated/applications/$applicationId'
    | '/_authenticated/applications/url'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated/route.tsx",
      "children": [
        "/_authenticated/applications/$applicationId",
        "/_authenticated/applications/url"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_authenticated/applications/$applicationId": {
      "filePath": "_authenticated/applications/$applicationId.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/applications/url": {
      "filePath": "_authenticated/applications/url.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
